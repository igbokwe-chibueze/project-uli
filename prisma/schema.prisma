// ──────────────────────────────────────────────────────────────────────────────────────────
// Prisma schema
// Leverages region markers for clarity and navigation
// ──────────────────────────────────────────────────────────────────────────────────────────

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ──────────────────────────────────────────────────────────────────────────────────────────
// Enums Region
// ──────────────────────────────────────────────────────────────────────────────────────────

enum UserRole {
  ADMIN
  USER
}

enum OrgRole {
  OWNER
  MANAGER
  AUDITOR
  MEMBER
}

enum ModuleType {
  HSEMS
  QMS
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ──────────────────────────────────────────────────────────────────────────────────────────
// Auth & User Models Region (original + 2FA)
// ──────────────────────────────────────────────────────────────────────────────────────────

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordChangedAt     DateTime?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  sessions              Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Extended Relations
  organizations OrganizationMember[]
  invites       InviteToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationTokenCustom {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// ──────────────────────────────────────────────────────────────────────────────────────────
// Organization & Roles Region
// ──────────────────────────────────────────────────────────────────────────────────────────

model Organization {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  logo        String?
  industry    String?
  country     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members   OrganizationMember[]
  invites   InviteToken[]
  modules   OrganizationModule[]
  incidents Incident[]
  audits    Audit[]
}

model OrganizationMember {
  id       String   @id @default(cuid())
  orgId    String
  userId   String
  role     OrgRole  @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Back-relations for EMS modules
  reporterOf Incident[] @relation("Reporter")
  assigneeOf Incident[] @relation("Assignee")
  audits     Audit[]

  @@unique([orgId, userId])
}

model InviteToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  userId    String?
  orgId     String?
  role      OrgRole  @default(MEMBER)

  // Relations
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

// ──────────────────────────────────────────────────────────────────────────────────────────
// Modules Region
// ──────────────────────────────────────────────────────────────────────────────────────────

model Module {
  id          String     @id @default(cuid())
  type        ModuleType @unique
  name        String
  description String?
  createdAt   DateTime   @default(now())

  // Back-relations
  organizationModules OrganizationModule[]
}

model OrganizationModule {
  id          String   @id @default(cuid())
  orgId       String
  moduleId    String
  installedAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  module       Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([orgId, moduleId])
}

// ──────────────────────────────────────────────────────────────────────────────────────────
// HSEMS Incidents Region
// ──────────────────────────────────────────────────────────────────────────────────────────

model Incident {
  id           String           @id @default(cuid())
  orgId        String
  reporterId   String
  assigneeId   String?
  title        String
  description  String
  severity     IncidentSeverity @default(LOW)
  location     String?
  dateOccurred DateTime
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  organization Organization        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  reporter     OrganizationMember  @relation("Reporter", fields: [reporterId], references: [id])
  assignee     OrganizationMember? @relation("Assignee", fields: [assigneeId], references: [id])
}

// ──────────────────────────────────────────────────────────────────────────────────────────
// QMS Audits & Nonconformities Region
// ──────────────────────────────────────────────────────────────────────────────────────────

model Audit {
  id            String    @id @default(cuid())
  orgId         String
  auditorId     String
  title         String
  scope         String?
  dateScheduled DateTime
  dateCompleted DateTime?
  findings      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  organization    Organization       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  auditor         OrganizationMember @relation(fields: [auditorId], references: [id])
  nonConformities NonConformity[]
}

model NonConformity {
  id               String   @id @default(cuid())
  auditId          String
  description      String
  rootCause        String?
  correctiveAction String?
  preventiveAction String?
  status           String   @default("OPEN")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  audit Audit @relation(fields: [auditId], references: [id], onDelete: Cascade)
}
